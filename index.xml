<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>undefined on undefined </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://marony.github.io/</link>
    <language>ja</language>
    
    
    <updated>Wed, 09 Jan 2019 20:49:06 JST</updated>
    
    <item>
      <title>ITエンジニアに学歴が必要か</title>
      <link>http://marony.github.io/post/post_20190109204906/</link>
      <pubDate>Wed, 09 Jan 2019 20:49:06 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20190109204906/</guid>
      <description>

&lt;h2 id=&#34;itエンジニアに学歴が必要か&#34;&gt;ITエンジニアに学歴が必要か&lt;/h2&gt;

&lt;p&gt;僕は大学中退です。&lt;/p&gt;

&lt;p&gt;高校生の途中で理系と文系にわかれることを知った上に
「理系には女の子がいない」という驚愕の事実さえも耳にして、
得意だった物理と数学を捨てて必死で世界史と国語を頑張って、後は得意だった英語で文系の大学に入りました。&lt;br /&gt;
今思えば女の子に縁なんてなかったのになぜそこまで衝動的に行動したのか全く意味がわかりません。&lt;br /&gt;
誰か教えてください。&lt;/p&gt;

&lt;p&gt;文系大学には無事に入学できましたが、
特に彼女ができたりはしませんでした。&lt;br /&gt;
男よりも女の子の方が多いというのは僕の目指した環境だったはずです。&lt;/p&gt;

&lt;p&gt;ところが結局勉強がつまらなくて中退しました。&lt;br /&gt;
そこから2年ほどプログラマのアルバイトをしていましたが、
なぜかベンチャー企業(今の会社の前身)の目に止まり焼き肉を奢ってもらったので就職しました。&lt;/p&gt;

&lt;p&gt;関係ないですが最近は放送大学に入ってまして、
仕事が不定期に超忙しくなる上に勉強したいことは他にも山積みで卒業は絶望的なのですが、
大学を卒業してみたいという気持ちは一応あったりします。&lt;/p&gt;

&lt;p&gt;ところで、最近は分散技術や機械学習のおかげで博士号持ちの方を多く目にするようになりました。&lt;br /&gt;
またアメリカではそもそも博士号持ちでないとITエンジニアにはなれないという話も聞きます。&lt;/p&gt;

&lt;p&gt;ITエンジニアは専門的な知識が必要な職ですのでこの流れは正しいのだと思います。&lt;br /&gt;
ソフトウェア開発の環境はどんどん自動化・省力化され便利なツールもどんどん出てきて、
本来注力すべきドメイン部分に力を入れられるようになってきました。&lt;br /&gt;
これからさらにソフトウェア開発が対象とするビジネスは複雑化・高度化し、
専門知識がないと戦えないようになっていくはずです。&lt;br /&gt;
このような方々がIT業界に増えれば世界でも戦えるようになるし、
何より頭のいい人たちなので業界を良くしてくれるだろうと思っています。&lt;/p&gt;

&lt;p&gt;結論としては今までのような職人タイプではなくて絶対に博士号を持っているような人たちが必要ですよね。&lt;/p&gt;

&lt;p&gt;ただし懸念もあります。&lt;/p&gt;

&lt;p&gt;IT業界にはまだまだ力作業がたくさん残っています。&lt;br /&gt;
人と人とで成り立つ部分も多いです。&lt;/p&gt;

&lt;p&gt;これらは高学歴の人たちがやることではないですし、かと言ってすぐになくなるとも思えません。&lt;br /&gt;
IT業界の中で研究職と土方にわかれていくのでしょうか？&lt;br /&gt;
学歴のない人たちが土方をして泥臭い部分を担っていくのでしょうか？&lt;br /&gt;
会社単位では既にこうなりつつある雰囲気は感じますね。&lt;/p&gt;

&lt;p&gt;僕はプログラミング以外にできることもないので、
どんどん業界の片隅に追いやられるのは辛いなぁと思います。&lt;br /&gt;
土方として働くにしても、体力の衰えや親の介護が視界に入ってきているので
若い人ほど長時間働けません。&lt;br /&gt;
勤務時間なしにしても最近の若い人は優秀ですしね。&lt;br /&gt;
子供もいておっさんですので今から他業種への転職もなかなか厳しいところ。&lt;/p&gt;

&lt;p&gt;学歴は必要だと思うし高学歴の人がどんどんIT業界に入ってきてほしいけど、
僕はこれからどうすればいいのでしょうね…&lt;br /&gt;
コンピュータ技術の勉強は一生続けると思いますが、
基礎脳力が違う人たちで溢れる業界で生き残ることができるでしょうか。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>今年の目標</title>
      <link>http://marony.github.io/post/post_20190107224444/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20190107224444/</guid>
      <description>

&lt;h2 id=&#34;今年の目標&#34;&gt;今年の目標&lt;/h2&gt;

&lt;p&gt;今年の目標は下記の3つです。&lt;br /&gt;
去年は「歯医者に行く」が目標でしたが達成できませんでした。&lt;/p&gt;

&lt;h3 id=&#34;代数&#34;&gt;代数&lt;/h3&gt;

&lt;p&gt;Haskellでモナドに触れてから圏論に興味を持ち、Twitterでは「モナドの理解に圏論なんて必要ない」と言われつつも圏論を今年こそはマスターしたいです。なんとなくわかる気がするなーから脱したいです。&lt;br /&gt;
圏論の本を読んでも結局わからなくて群論に戻って、それでもわからなくて集合論に戻ったりして、たまに圏論の本に戻ってみると以前よりは理解できたりするけれど、今年前半は代数を基礎から固めるために行列やベクトルや集合を重点的にやります。&lt;/p&gt;

&lt;p&gt;圏論や群論は僕にはまだ早かった…&lt;/p&gt;

&lt;p&gt;本当は機械学習のために微分積分や統計なんかも学びたいのだけれどそれはまた来年以降で。&lt;/p&gt;

&lt;h3 id=&#34;英語&#34;&gt;英語&lt;/h3&gt;

&lt;p&gt;英語を読むのは技術書やマニュアルならなんとかなるんだけど、聞くことと書くことが壊滅的なので今年は英語を勉強します。&lt;/p&gt;

&lt;p&gt;ちなみに、書くことに関しては日本語でもダメダメなので、ブログで文章を書くことを習慣化したいと思っていることはこの前書きました。&lt;/p&gt;

&lt;p&gt;また、聞くことも日本語でも訛りなど全く聞き取れなくて、実祖父の言葉は間に実父に通訳してもらっていたくらいでした。
神奈川県のど田舎の訛りは凄いです。&lt;br /&gt;
横浜だと「〜じゃん」ですが、この辺りは基本的に「〜だべ」です。&lt;/p&gt;

&lt;p&gt;標準語でもいきなり話しかけられると理解できずに聞き直してしまうことも多いです。&lt;br /&gt;
頭が人の話を聞くモードになってないと、常に何かしら頭の中で考えているので聞こえているのに理解できないのです。&lt;/p&gt;

&lt;p&gt;さらに、宇多田ひかるや桑田佳祐の歌もなんだか聞き取れないです。あれ、日本語ですか？&lt;br /&gt;
と、英語の問題じゃない気がしますがとりあえずやります。&lt;/p&gt;

&lt;h3 id=&#34;趣味のプログラミング&#34;&gt;趣味のプログラミング&lt;/h3&gt;

&lt;p&gt;趣味のプログラミングが滞りがちなので、作るものと期間を定めて計画的に作って公開していきます。&lt;/p&gt;

&lt;p&gt;現状ではReact + ReduxとScalaのPlayをマスターしたいので両方を組み合わせてWebサービスを作りたいと考えています。&lt;br /&gt;
コンパイラや分散キャッシュとかも作りたいですが、短期間で作れるものでもないので今後ですね。&lt;/p&gt;

&lt;p&gt;だいたい季節に1つ作れればいいかなくらいの感じです。&lt;/p&gt;

&lt;h3 id=&#34;最後に&#34;&gt;最後に&lt;/h3&gt;

&lt;p&gt;これらを始めようと思ったのは、真面目に転職を考え始めたからです。
GAFAとまではいかなくても、外資もターゲットにしたいですからね。&lt;br /&gt;
家族には「とうちゃん、Googleで働こうと思うんだ」と言っておきました。&lt;/p&gt;

&lt;p&gt;こんな感じで今年もよろしくおねがいします。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>人生無駄な経験なんてないですよ</title>
      <link>http://marony.github.io/post/post_20190107184353/</link>
      <pubDate>Mon, 07 Jan 2019 22:39:05 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20190107184353/</guid>
      <description>

&lt;h2 id=&#34;人生無駄な経験なんてないですよ&#34;&gt;人生無駄な経験なんてないですよ&lt;/h2&gt;

&lt;p&gt;最近「三角関数なんて使わない」「古文なんて役に立たない」というやり取りをTwitterで見ました。&lt;/p&gt;

&lt;p&gt;それらの発言の「使わない」「役に立たない」の意味が各々ぶれていて、「【俺は】使わない」が「【人類は】使う」と反論されていたりと噛み合っていなさそうな感じではありました。&lt;br /&gt;
ただ流れとしては「数学が必要ない程度の人生を送っている癖に三角関数は使わないとか言うな」でした。&lt;/p&gt;

&lt;p&gt;僕も何度かこれについてツイートしたのですが
要不要は結局のところ人によるとしか言えません。&lt;/p&gt;

&lt;p&gt;数学を使わないと成り立たない技術や道具は多々ありますが、その道具を使う人には数学は要求されません。&lt;br /&gt;
これは数学を使う人たちに感謝するしかないですね。&lt;/p&gt;

&lt;p&gt;でも数学を使わなくても生きている人はたくさんいます。&lt;br /&gt;
それこそ僕の親族には知的障害者がいますが、数学なんて使わなくても健やかに生きています。&lt;br /&gt;
会話がやっと成り立つ程度の小学校の勉強にすら落ちこぼれた人もいます。&lt;br /&gt;
数学を知らない人の人生を取り上げることは許されませんし、
数学を知っていることでマウンティングすることも許せません。&lt;/p&gt;

&lt;p&gt;あ、僕自身は文系出身というか中退ですが数学は好きです。&lt;/p&gt;

&lt;p&gt;また「古文なんて役に立たない」については「古文を知っていると人生が豊かになる」という返信がついていました。&lt;br /&gt;
これ自体については同意なのですが、
「人生が豊かになる」ことを「役立つ」とするならば「万引き」「中卒」「結婚」「犬を飼う」…人生のありとあらゆるものが人生を豊かにすると思っています。&lt;/p&gt;

&lt;p&gt;僕のツイッターのプロフィールには「人生無駄な経験なんてないですよ」と書いてあります。&lt;br /&gt;
これは人から見たら非常識や不幸のどん底など色々経験してきた僕が、
やっぱりそれらがあってこその今だよなと思っているからです。&lt;br /&gt;
それらのどれが欠けても違う人生が待っていたと思いますが、
今の人生に特に後悔はありません。&lt;br /&gt;
不幸なことがないという意味ではありません。
不幸や幸福が入り混じっていますがやり直したいという気持ちがないのです。&lt;/p&gt;

&lt;p&gt;みんな色んな経験をすると思いますが、それが役に立ったのか無駄だったのかは死ぬまでわかりません。&lt;br /&gt;
三年間何もしないでニートしていたことを「結局あれはよかったんだな」と死に際に思うことだってありえます。&lt;br /&gt;
そういう意味では今この時点で無駄な経験なんて何ひとつありません。&lt;/p&gt;

&lt;p&gt;「古文」もまた人生におけるこのような物事のうちのひとつなのだろうなと思います。&lt;br /&gt;
あれば違う人生が待っている、なければまた違う人生になる。&lt;br /&gt;
それだけのことです。&lt;/p&gt;

&lt;p&gt;人生は有限です。&lt;br /&gt;
世界や宇宙の全てを学ぶことはできません。&lt;br /&gt;
あることを学ぶという選択をすることは、その時間でできたはずの他の物事を捨てることです。&lt;/p&gt;

&lt;p&gt;また、人間は全能ではありません。&lt;br /&gt;
現時点でわかっている事実から未来を正確に予測することはできません。&lt;br /&gt;
ある勉強が10年後に(主にビジネスの)役に立つのか、役に立たないのかなんて誰にもわかりません。&lt;/p&gt;

&lt;p&gt;自分の人生や仕事に誇りを持つことはいいことですが、そうではない人の人生をバカにするのはやめてほしいです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>子供たちのプログラミング(Scratch作品)</title>
      <link>http://marony.github.io/post/post_20190106024143/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20190106024143/</guid>
      <description>

&lt;h2 id=&#34;子供たちのプログラミング-scratch作品&#34;&gt;子供たちのプログラミング(Scratch作品)&lt;/h2&gt;

&lt;p&gt;僕がプログラマなこともあり、
うちの子供たちは小学校低学年くらいからプログラミングをしています。&lt;/p&gt;

&lt;p&gt;子供たちには専用のパソコンを用意(動作がたまに遅いので「カチコチのパソコン」と呼ばれています)してScratchというプログラミング環境があることを教えました。&lt;br /&gt;
それ以来、プログラミングのことはほぼ何も教えていないのですが、色々と作っているようです。&lt;/p&gt;

&lt;p&gt;僕も子供たちが何を作っているのかはあまりチェックできていないのですが、
面白そうなのを紹介してみます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://scratch.mit.edu/projects/196521799/&#34;&gt;MIYABI　錦鯉　～三色～ on Scratch&lt;/a&gt;&lt;br /&gt;
これ、マウスに鯉がついてくるんですが、鯉が数十枚の絵からなっていてなんと「手書き」なんですね。&lt;br /&gt;
長男の集中力すごすぎです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://scratch.mit.edu/projects/66020310/&#34;&gt;最小公倍数 on Scratch&lt;/a&gt;&lt;br /&gt;
これ、次男が小学校の宿題をやるために作ったやつですね…&lt;br /&gt;
真面目に宿題やってください&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://scratch.mit.edu/projects/170040528/&#34;&gt;十進数と二進数 変換 on Scratch&lt;/a&gt;&lt;br /&gt;
算数大好き次男。&lt;br /&gt;
こういうの好きですね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://scratch.mit.edu/projects/49476226/&#34;&gt;忍者ダッシュ！ on Scratch&lt;/a&gt;&lt;br /&gt;
長男は絵を描くのがうまいなぁ&lt;/p&gt;

&lt;p&gt;全部の作品はこのリンクから。&lt;br /&gt;
&lt;a href=&#34;https://scratch.mit.edu/users/marony/&#34;&gt;marony on Scratch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scratchはブロックを組み合わせてプログラミングするので、子供向けと思われてしまうのですが、プログラミング自体の機能が劣っているとかは特にないです。&lt;br /&gt;
同じ環境で絵や音も作れたり、質問もできる掲示板があったりと、プログラミング教育には最適だと思っています。&lt;/p&gt;

&lt;p&gt;ただ、よくできた環境だけに、学校でパソコン部に入ってゲームを作ったり、オススメはしないけど将来プログラマになったりすると出会うことになる「普通のプログラミング言語」とは全然違います。&lt;br /&gt;
そのため、今は開発環境を整え、テキストエディタやIDEでコードを書き、絵や音は専用の別ツールで作り、質問はどこか適切な場所を探さなければならない「普通のプログラミング言語」をどうやって子供たちに教えればいいのかで悩んでいます。&lt;/p&gt;

&lt;p&gt;子供たちはアルゴリズムを考えたりはもう問題ないのですが、やっぱり「普通のプログラミング言語」を経験させたい。&lt;br /&gt;
贅沢な悩みですし、好きでやってれば勝手に覚えるのかも知れませんけれど。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>profile</title>
      <link>http://marony.github.io/profile/</link>
      <pubDate>Sat, 05 Jan 2019 09:29:42 JST</pubDate>
      
      <guid>http://marony.github.io/profile/</guid>
      <description>

&lt;h2 id=&#34;人種&#34;&gt;人種&lt;/h2&gt;

&lt;p&gt;C#プログラマ@東京&lt;/p&gt;

&lt;h2 id=&#34;構成要素&#34;&gt;構成要素&lt;/h2&gt;

&lt;div&gt;
    &lt;canvas id=&#34;profileChart&#34; width=&#34;860&#34; height=&#34;400&#34;&gt;&lt;/canvas&gt;
    
    &lt;script src=&#34;../../js/chartData.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;../../js/Chart.min.js&#34;&gt;&lt;/script&gt;
    
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.asia/9FISHMC&#34;&gt;欲しい物リスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/_marony&#34;&gt;Twitter&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/_marony?ref_src=twsrc%5Etfw&#34; class=&#34;twitter-follow-button&#34; data-show-count=&#34;false&#34;&gt;Follow @_marony&lt;/a&gt;&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://soundcloud.com/marony0607/&#34;&gt;SoundCloud&lt;/a&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;166&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; allow=&#34;autoplay&#34; src=&#34;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/127523460&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&#34;&gt;&lt;/iframe&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;166&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; allow=&#34;autoplay&#34; src=&#34;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/137619535&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&#34;&gt;&lt;/iframe&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;githubリポジトリ&#34;&gt;GitHubリポジトリ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/pi_js&#34;&gt;JavaScriptでPIを計算するよ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marony.github.io/lifegame_pde/&#34;&gt;processingでライフゲーム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/diskreport&#34;&gt;Scalaでディスク容量表示アプリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/katamino-solver&#34;&gt;Katamino(カタミノ)解いてる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/fix-const&#34;&gt;VSCodeのネタ機能拡張作ったり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/monhanxx&#34;&gt;モンハンXX攻略アプリ(Ruby + Python(Django))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/tf-fizzbuzz&#34;&gt;TensorFlowでFizzBuzz(Python)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/raft_test&#34;&gt;ScalaのAKKAでRaftアルゴリズムを試した&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/youtuber&#34;&gt;YouTubeダウンロードサイト(Scala)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/kuina-sudoku&#34;&gt;くいなちゃんのトランプ数独解法アルゴリズム(Clojure)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/SudokuCS&#34;&gt;C#で数独を解くプログラム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/SudokuFS&#34;&gt;F#で数独を解くプログラム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/Syogaku4&#34;&gt;小学4年生の息子の問題を解く(Scala)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/TenPuzzle&#34;&gt;10パズル(Scala)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/syogi&#34;&gt;アルゴリズム対戦将棋(Clojureのお勉強)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/worker&#34;&gt;社畜.net(ClojureでWebサービス)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/scala3d_wireframe&#34;&gt;Scalaで3D表示してみたり…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/cpp3d&#34;&gt;C++で3D表示してみたり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marony/rust3d&#34;&gt;Rustで3D表示してみたり&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;思い出の写真&#34;&gt;思い出の写真&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://marony.github.io/images/profile/1464560511355.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://marony.github.io/images/profile/IMG_20160922_172626.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://marony.github.io/images/profile/P_20180116_200111_vHDR_On.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>人間と他の生物</title>
      <link>http://marony.github.io/post/post_20190104011409/</link>
      <pubDate>Fri, 04 Jan 2019 01:14:09 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20190104011409/</guid>
      <description>

&lt;h2 id=&#34;人間と他の生物&#34;&gt;人間と他の生物&lt;/h2&gt;

&lt;p&gt;明確に違うと言うことはない(基準を示せと言われると困る)けれど、
人間が他の生物と決定的に違うところは
他の生物は得すると損するの二択なのに対し、
人間は今は損して将来得する、自分が損しても相手に損害を与えたいなど、他の選択肢をたくさん選べることだと思う。&lt;/p&gt;

&lt;p&gt;感情的になると思考する暇がなく他の生物と同じ行動を取る。&lt;br /&gt;
一方、自分で懸命に考えた末の行動だと、例え結果が失敗だとしても後悔しにくい。&lt;br /&gt;
あとから考えて仕方なかったなと思える。&lt;/p&gt;

&lt;p&gt;何気ない行動ひとつひとつひとつについて、
一歩でもいいから立ち止まって
何か考えてから行動したい。&lt;/p&gt;

&lt;p&gt;ただし、これが老害化でもあると思う。&lt;br /&gt;
思考し行動することが習慣になり、自分の中で常識となってしまう。&lt;br /&gt;
その常識と異なった行動を誤っていると勘違いしてしまう。&lt;/p&gt;

&lt;p&gt;また、
良いことと悪いこと、
考えれば考えるほどに、
良いことにもデメリット
悪いことにはメリットがあることに気がつく。
良い方にも舵を切れず、かと言って悪い方にも舵を切れない。&lt;br /&gt;
自分の行動が思考に束縛される。&lt;/p&gt;

&lt;p&gt;これが賢明(≒老害)な大人。&lt;/p&gt;

&lt;p&gt;若い頃のように何も考えないからこそ為せたこと、たくさんあるはず。&lt;br /&gt;
かと言って一生何も考えないのも考えもの。&lt;/p&gt;

&lt;p&gt;まだまだ生きなければいけないのに、目の前の選択肢ひとつ選べない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>文章辛い</title>
      <link>http://marony.github.io/post/post_20190103184804/</link>
      <pubDate>Thu, 03 Jan 2019 18:48:04 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20190103184804/</guid>
      <description>

&lt;h2 id=&#34;文章辛い&#34;&gt;文章辛い&lt;/h2&gt;

&lt;p&gt;Twitterは凄い&lt;br /&gt;
くだらないことばかり書いているけれど、たまに誰かに刺さってバズったりする。&lt;/p&gt;

&lt;p&gt;文章が書けなすぎるのでブログを頻繁に書くと決めたけれど、
&lt;a href=&#34;http://marony.github.io/post/post_20181226212544/&#34;&gt;これ&lt;/a&gt;
と
&lt;a href=&#34;http://marony.github.io/post/post_20181231231603/&#34;&gt;これ&lt;/a&gt;
を書いて
文章書ける気になってた&lt;/p&gt;

&lt;p&gt;でも、たいしたネタでもないのにブログを文章で埋めようとすると
たいした文章にはならないと気がついた&lt;/p&gt;

&lt;p&gt;読み返して消したい衝動に駆られるんだけど
なんとなく数年後の自分の楽しみに取っておく&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>文章の書き方</title>
      <link>http://marony.github.io/post/post_20181231231603/</link>
      <pubDate>Mon, 31 Dec 2018 23:16:04 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20181231231603/</guid>
      <description>

&lt;h2 id=&#34;文章の書き方&#34;&gt;文章の書き方&lt;/h2&gt;

&lt;p&gt;文章が下手だ下手だ、書けないと思っていたんだけれど、
プログラミングが好きすぎてそれ以外のことに何も熱心にならなかっただけだと思い始めた今日この頃。&lt;br /&gt;
もちろん文章を真面目に書いている人たちには敵うわけではないのだけれど、
趣味でブログを公開している人並には書けているのではないかと自負しています。&lt;br /&gt;
そこでどんな風に書いているのかを公開しておきます。&lt;br /&gt;
これは、子供の頃から記憶力が壊滅的な自分向けの備忘録でもあります。&lt;/p&gt;

&lt;p&gt;そもそもですけれど、プログラミングに対するくらいの情熱をかければたいていのことはできます。&lt;br /&gt;
プログラミングを覚えるのと同じくらいの力で日本語を覚えましょう。&lt;br /&gt;
仕様を考えるのと同じくらいの力で伝えたいことを考えましょう。&lt;br /&gt;
プログラムに掛けるのと同じくらいの労力を日本語にも掛ければ同じようなレベルのものは書けるはずです。&lt;br /&gt;
僕の場合の問題はプログラミング以外は面白いと思えないことですけどね。&lt;/p&gt;

&lt;p&gt;さて、今月から何本かブログ記事を書いてきて書き方が定まってきました。&lt;br /&gt;
まずはスマホ(Google Keep)になんでもメモります。&lt;br /&gt;
思ったこと、感じたこと、さっきメモったことへの補足…&lt;br /&gt;
なんでもいいです。&lt;br /&gt;
そのうち文章に役に立つのは1/10くらいだけど、1日に100件くらいはメモってるのでなんとかなります。&lt;br /&gt;
ちなみにブログに書かなくてもほとんどはSNS(Twitter)に垂れ流しています。&lt;/p&gt;

&lt;p&gt;ここでブログの内容を考えます。&lt;br /&gt;
何を伝えたいか。&lt;br /&gt;
どんな人に伝えたいか。&lt;br /&gt;
それにはどんなタイトルにしたらいいのか。&lt;br /&gt;
文章の流れをどうしたら伝わりやすいか。&lt;br /&gt;
ここが実は一番大事だと思っています。&lt;br /&gt;
高尚じゃなくていいです。&lt;br /&gt;
なんか偉そうなことを何も知らない人に伝えたい、インパクトのある言葉で広告収入を得たい、そんなのでも良いです。&lt;br /&gt;
日本語の文法なんて間違っても誤字脱字があっても、ここさえしっかりしていれば大丈夫だと思います。&lt;/p&gt;

&lt;p&gt;そして「アウトライナー実践入門」に書いてあったことそのままな気がしますが、
Google KeepからWorkFlowyにメモを全て転記します。&lt;br /&gt;
ここでそれらを並び替えるだけで文章になれば楽なのですが、たくさんの加筆修正が必要になります。&lt;br /&gt;
項目の上下を入れ替えたり、親子を繋ぎ変えたり、文章を書き加えたりします。&lt;br /&gt;
もったいないけどいらない文章を削除します。&lt;br /&gt;
頭から何度も読んでみて違和感のないように。&lt;br /&gt;
伝えたいことが伝わるように。&lt;/p&gt;

&lt;p&gt;最後にWorkFlowyで違和感のなくなった文章をMarkdownにして最初から読み直します。&lt;br /&gt;
最後の修正をして投稿です。&lt;/p&gt;

&lt;p&gt;おお、何も価値ある文章にならなかった…&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ソフトウェア設計について</title>
      <link>http://marony.github.io/post/post_20181229091848/</link>
      <pubDate>Sat, 29 Dec 2018 09:18:48 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20181229091848/</guid>
      <description>

&lt;h2 id=&#34;ソフトウェア設計について&#34;&gt;ソフトウェア設計について&lt;/h2&gt;

&lt;p&gt;文章練習中ですので連日投下します。&lt;/p&gt;

&lt;h3 id=&#34;導入&#34;&gt;導入&lt;/h3&gt;

&lt;p&gt;Twitterで「設計ってどうやって勉強するの？」っていうリプを見ました。&lt;/p&gt;

&lt;p&gt;確かに座学や個人レベルでの開発では設計を学ぶのは難しいと思います。&lt;br /&gt;
設計の書籍はとても抽象的で実感が湧かないですし、ライブラリやフレームワークを組み合わせるだけの開発では「設計」はほとんどしなくていいからです。
実践で学んできてしまった僕にはどうやって勉強するのかはわかりませんが、僕が何を考えて設計しているのかはわかります。&lt;/p&gt;

&lt;p&gt;設計には物理設計(今名付けた)と論理設計(今名付けた)があります。&lt;br /&gt;
僕は用語を覚えるのが不得意なため勝手に名付けましたが正式な名前がきっとあります。&lt;/p&gt;

&lt;p&gt;物理設計は、決められた動作をする仕組み(=システム)を考えることです。&lt;br /&gt;
基本的には「どう実現するか」を考えます。&lt;/p&gt;

&lt;p&gt;論理設計は、人間がわかりやすいか、改修しやすいか、テストがしやすいか、などを考えます。&lt;br /&gt;
基本的には「どう分割するか」を考えます。&lt;/p&gt;

&lt;p&gt;双方はどちらも必要なものですが、システムが実現できてから分割方法が決まると思いますので、最初は物理設計から行います。&lt;br /&gt;
物理設計の概要が決まればその後は並行して論理設計も決めていけると思います。&lt;br /&gt;
(この辺りたぶん異論反論がたくさんある人がいると思います)&lt;/p&gt;

&lt;p&gt;今回は物理設計についてです。&lt;br /&gt;
論理設計については近いうちに書きたいですが、こちらは書物やブログも豊富ですので気になる方は読んでみてください。&lt;br /&gt;
オブジェクト指向設計やDDDやClean Architectureなんかはこれです。&lt;br /&gt;
たぶん一般的に「ソフトウェア設計」と呼ばれているものは論理設計です。&lt;/p&gt;

&lt;p&gt;さて、僕は抽象的な文章を書くのが得意ではありませんので具体例で説明します。&lt;/p&gt;

&lt;p&gt;最初に言っておかなければならないのは、
使っているプログラミング言語やライブラリ・フレームワーク標準の機能で実現できたり、
社内標準の方法があるのであれば、
それを使うのが「一番無難」だと言うことです。&lt;/p&gt;

&lt;p&gt;あえてオレオレ設計を作ったりトリッキーなことをして技術的負債を増やすことはありません。&lt;br /&gt;
(Ruby on RailsでJavaのようなサービス層を儲けようとして爆死なんかしてませんよ？)&lt;/p&gt;

&lt;h3 id=&#34;設計するもの&#34;&gt;設計するもの&lt;/h3&gt;

&lt;p&gt;あるシステム(もしくはプロセス)で、他のシステム(あるいはプロセス)から受け取ったデータを別の他のシステム(あるいはプロセス)に送るシステム(もしくはプロセス)を考えます。&lt;br /&gt;
なんでこんな書き方になっているかと言うと、
僕の持論では「システム全体の設計」と「プロセス内部の設計」は粒度が違うだけ
で考え方は同じだと思っているからです。&lt;br /&gt;
あえて違いを言えば、前者は必要とされる知識が広く、後者は深い、ということでしょうか。&lt;/p&gt;

&lt;p&gt;これ以降はだるいので「プロセス」で統一します。&lt;/p&gt;

&lt;p&gt;さて、要は「他プロセスから受信したデータを別の他プロセスに送信するプロセス」を設計します。&lt;/p&gt;

&lt;h3 id=&#34;インターフェース&#34;&gt;インターフェース&lt;/h3&gt;

&lt;p&gt;まずはどんなプロトコルで受信・送信するのかを決めます。&lt;br /&gt;
これはわりかし誰でも決められるというか、
相手方が既存プロセスならもう決まってますし、
即時性が求められないし大量だからファイルでいいねとか、
リアルタイムだからTCP/IPねとか、
配る範囲が広範囲だからIPマルチキャストにしようねとか、
であっさり決まります。&lt;/p&gt;

&lt;p&gt;ここでは(今後の話の展開上)TCP/IPでリアルタイムで送受信することに決まったとします。&lt;/p&gt;

&lt;h3 id=&#34;動く仕組み-1&#34;&gt;動く仕組み(1)&lt;/h3&gt;

&lt;p&gt;次に「受信したデータを送信する仕組み」について考えます。&lt;/p&gt;

&lt;p&gt;ここでは安直に「受信したらそのまま送信する」としましょう。&lt;br /&gt;
受け取ったら送信、受け取ったら送信、シンプルですね。&lt;/p&gt;

&lt;h3 id=&#34;動く仕組み-2&#34;&gt;動く仕組み(2)&lt;/h3&gt;

&lt;p&gt;ところが、送信する側のプロセスは秒間最大10000件(最大であって常に10000件ではない)送ってくるのに対し、受信する側のプロセスは秒間1件しか受け取れない、とわかりました。&lt;/p&gt;

&lt;p&gt;さぁ大変です。&lt;br /&gt;
今のままだと、秒間最大10000件送りつけられてしまう受信側のプロセスが受けきれません。&lt;br /&gt;
このプロセスの送信が延々と待たされるか、受信側のプロセスで何かトラブルが起きるかです。&lt;br /&gt;
さらにこちらの送信が待たされればこちらに送信してきている側のプロセスにも影響が及びます。&lt;br /&gt;
これでは全然ダメですね。&lt;/p&gt;

&lt;p&gt;別の案を考えましょう。&lt;/p&gt;

&lt;p&gt;素直に考えると「受信側のペースで送信すればいいのでは？」と考えますよね。&lt;br /&gt;
「受信側のペースで送信する」にはどうしたらいいでしょうか？&lt;/p&gt;

&lt;p&gt;ひとつ考えられるのは「送信側プロセスから秒間10000件送られてきても(ウェイトを入れて)秒間1件しか受信しない(=受信側のプロセスに秒間1件しか送信しない)」です。&lt;br /&gt;
でもこれはすぐにダメなことがわかります。&lt;br /&gt;
先ほどと同様に秒間10000件送る側のプロセスに影響(待たされる)が出てしまいます。
それが他ベンダだったりすると怒られが発生します。&lt;/p&gt;

&lt;h3 id=&#34;動く仕組み-3&#34;&gt;動く仕組み(3)&lt;/h3&gt;

&lt;p&gt;もうひとつ考えられるのは「データを貯めておく」です。&lt;/p&gt;

&lt;p&gt;秒間10000件受信したものは一度貯めておき、ゆっくりと秒間1件送信すればいいのです。&lt;br /&gt;
貯めておく方法には色々ありますが、一番簡単なメモリ内のキューを使ってみます。&lt;br /&gt;
プログラミング言語のライブラリにそのものが用意されているかも知れませんし、リストなどのコレクションを用いて自分で作らないといけないかも知れません。&lt;/p&gt;

&lt;p&gt;送信側プロセスから受信したデータをぽんぽんキューに投げ込んで、受信側プロセスに送信する側はそれを1秒間に一回取り出して送ります。&lt;/p&gt;

&lt;p&gt;これは別スレッドなり非同期IOを用いないと実現できませんがここでは触れません。&lt;/p&gt;

&lt;p&gt;(スレッドやトランザクションについては個人的に大好きなので改めて何か書きたいですね)&lt;/p&gt;

&lt;p&gt;これで基本的な動きは大丈夫そうです。&lt;/p&gt;

&lt;h3 id=&#34;完成&#34;&gt;完成？&lt;/h3&gt;

&lt;p&gt;本当に？&lt;br /&gt;
パフォーマンスは？&lt;br /&gt;
メモリ使用量は？&lt;br /&gt;
CPU使用率は？&lt;/p&gt;

&lt;p&gt;送信側は「最大」とは言え、延々と数時間秒間10000件送りつけてくるとするならばメモリ使用量が心配ですね。&lt;br /&gt;
実際の動作環境でどのくらいメモリを使えるかを調べて秒間10000件を最大どのくらい受け続けても大丈夫かを計算しましょう。&lt;br /&gt;
同時に送信側プロセスの作成者(もしくは社)に秒間10000件の状態が最大どのくらいの時間続くのか問い合わせましょう。&lt;/p&gt;

&lt;p&gt;それでメモリ使用量がヤバそうなら、メモリ内のキューじゃくてミドルウェアのMQを使用しましょうか。&lt;br /&gt;
MQを使うのが面倒ならば泥臭くデータベースを使いますか(使いたくないけど)。&lt;br /&gt;
それらを使うにしても今度はストレージの容量を見積もる必要があります。&lt;/p&gt;

&lt;p&gt;この仕組みで本当に動くのかパイロット(僕の場合、エラー処理とかUIを端折って最低限動くようにしたもの)を作ってみましょう。&lt;br /&gt;
パフォーマンスや各種リソースの利用量は大丈夫ですか？&lt;/p&gt;

&lt;h3 id=&#34;再確認&#34;&gt;再確認&lt;/h3&gt;

&lt;p&gt;でも、ちょっと待ってください。&lt;/p&gt;

&lt;p&gt;受信側プロセスは本当に全てのデータが必要なのでしょうか？&lt;br /&gt;
送信側プロセスから秒間10000件送られてきたとしても、受信側プロセスは1秒おきの(間引かれた)最新データのみが欲しいのではないでしょうか？&lt;br /&gt;
これは受信側プロセスの作成者(もしくは社)に聞いてみないとわかりません。&lt;/p&gt;

&lt;h3 id=&#34;動く仕組み-4&#34;&gt;動く仕組み(4)&lt;/h3&gt;

&lt;p&gt;結果その解釈(間引かれたデータ)で良かったとします。&lt;/p&gt;

&lt;p&gt;では「秒間最大10000件受信したデータの1秒おきの最新データを送信する」にはどうしたらいいでしょうか？&lt;br /&gt;
送信する側プロセスが送ってきたデータを前回の受信から1秒間経つまでは捨てて、1秒以上経ってから受信したデータだけを受信する側プロセスに送信するのはどうでしょう？&lt;/p&gt;

&lt;p&gt;送信する側プロセスが常に秒間10000件送ってきてくれればうまくいきそうです。&lt;br /&gt;
でも、秒間10000件はあくまで「最大」ですので5秒おきにしか送ってこない時間帯もあります。&lt;br /&gt;
そして1秒経つ前(0.5秒とか)に送信が止まってしまったら？&lt;br /&gt;
最新のデータを送信することができなくなってしまいますね。&lt;/p&gt;

&lt;p&gt;ここで1秒過ぎてもデータを受信しなかったら、直前に受信したデータを送るという仕組みも考えられますが、やりたいことに対して複雑すぎます。&lt;/p&gt;

&lt;h3 id=&#34;動く仕組み-5&#34;&gt;動く仕組み(5)&lt;/h3&gt;

&lt;p&gt;改めて考え直します。&lt;/p&gt;

&lt;p&gt;秒間10000件受信しようが1秒経つまでのデータは捨ててしまって良いのだから、キューなんていらなかったのです。&lt;br /&gt;
単純に送信側プロセスから受信したデータを変数に上書きしてしまいましょう。&lt;br /&gt;
1秒おきにその変数のデータを見に行って受信側プロセスに送信すればできあがりです。&lt;/p&gt;

&lt;p&gt;実際にはこのままだと受信してない時には最後のデータを1秒おきに送り続けてしまうので、受信したかのフラグを持つなど工夫が必要です。&lt;br /&gt;
また、別スレッドで同じ変数を読み書きすることになるのでスレッド間の同期処理も必要になります。&lt;/p&gt;

&lt;p&gt;これでなんとなく動く仕組みにはなったと思います。&lt;/p&gt;

&lt;h3 id=&#34;耐障害性&#34;&gt;耐障害性&lt;/h3&gt;

&lt;p&gt;ただこれだけではダメです。&lt;br /&gt;
このプロセスが落ちた時にシステム全体が止まるようではダメです。&lt;/p&gt;

&lt;p&gt;2台を常時稼働させるようにしましょう。&lt;br /&gt;
送信側プロセスには1台で2台に送信してもらうか、2台稼働してもらってそれぞれに送信してもらいましょう。&lt;br /&gt;
受信側プロセスは2台から同じデータを重複して受信することになるので、
データに一意な通番を用意して同じデータは弾いてもらうようにしましょう。&lt;/p&gt;

&lt;p&gt;受信側プロセスが落ちても同様です。&lt;br /&gt;
システム全体を止めるわけにはいきません。&lt;/p&gt;

&lt;p&gt;2台同時稼働してもらってもいいですが、今回は1台死んだらもう1台に切り替わる、としましょう。&lt;/p&gt;

&lt;p&gt;そうすると、受信側プロセスと一度切断してももう一度接続しにいく仕組みが必要になります。&lt;br /&gt;
また、永遠に再接続ループしたら大変なのでその上限値を設けたり、受信側プロセスがメンテナンスなどで止まる時間帯が週に1度あるならばその時間帯は再接続しないなどの仕組みも必要になります。&lt;br /&gt;
切断前にどこまで送ったかの管理をして再送できるような仕組みも必要かも知れません。&lt;/p&gt;

&lt;h3 id=&#34;パフォーマンス&#34;&gt;パフォーマンス&lt;/h3&gt;

&lt;p&gt;このプロセスは実際の稼働に耐えられるでしょうか？&lt;/p&gt;

&lt;p&gt;どのくらいまでなら耐えられるのかパイロットを作ってパフォーマンスを様々な条件で測っておきましょう。&lt;/p&gt;

&lt;p&gt;このプロセスはユーザ数やデータ数の増加によって負荷が上がるでしょうか？&lt;br /&gt;
もしそうならば同時に何台もデータを分散して稼働できるような仕組みも作る必要があります。&lt;/p&gt;

&lt;h3 id=&#34;運用を考える&#34;&gt;運用を考える&lt;/h3&gt;

&lt;p&gt;エラー時のログはどんな時にどんなものを出しましょうか？&lt;br /&gt;
些細なことでエラーログを吐くと監視している人が24時間不眠になります。&lt;br /&gt;
監視システムがパンクするかも知れません。&lt;/p&gt;

&lt;p&gt;エラーコードやメッセージはシステム全体で統一した方がいいですよね。&lt;/p&gt;

&lt;p&gt;このプロセスには定期的なメンテナンスジョブ(初期化やデータのクリアなど)は必要ないでしょうか？&lt;br /&gt;
起動ジョブ・停止ジョブは何曜日の何時に仕込みましょうか？&lt;br /&gt;
その時間に止まっても受信側プロセス・送信側プロセスはエラーになりませんか？&lt;br /&gt;
その日が休日だった場合の動きはどうなりますか？&lt;/p&gt;

&lt;h3 id=&#34;終わり&#34;&gt;終わり&lt;/h3&gt;

&lt;p&gt;だいたいこんなことを考えながら設計を行っています。&lt;/p&gt;

&lt;p&gt;これをシステム全体に渡って個々のプロセスに至るまで延々と行います。&lt;br /&gt;
何をどのように考えて何をしてるのかが伝わったでしょうか？&lt;/p&gt;

&lt;p&gt;まぁ、書いているうちに僕の捉える「設計」が一般的な「設計」の意味とずれている気がしてきたんですがどうなんでしょ。&lt;br /&gt;
ぶっちゃけ、各種設計とアーキテクチャの違いもわかってないですしね。&lt;/p&gt;

&lt;p&gt;※ 絵を入れてみようと思っていたのですが面倒でやめました…&lt;br /&gt;
※ 要望があればこのサイトではMermaid.jsが使えるようになっているので描きます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>管理できない人のタスク管理</title>
      <link>http://marony.github.io/post/post_20181228154039/</link>
      <pubDate>Fri, 28 Dec 2018 15:40:39 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20181228154039/</guid>
      <description>

&lt;h2 id=&#34;管理できない人のタスク管理&#34;&gt;管理できない人のタスク管理&lt;/h2&gt;

&lt;p&gt;誰かの役に立つのか不明ですが文章を書くことを習慣にしたいので書きます。&lt;/p&gt;

&lt;p&gt;僕はASD(アスペ)と診断されたことがありますが、たぶんADHDでもあります。&lt;br /&gt;
ITエンジニアですので仕事では設計したりプログラミングしたり障害対応したりしますが、
多くのプロジェクトに関わっているのでいろんな人が相談に来たり、突発で仕事が降ってきます。&lt;br /&gt;
ところが話しかけられたり別の作業をすると今まで何をしていたか忘れます。&lt;br /&gt;
絶対に忘れます&lt;br /&gt;
必ず忘れます&lt;/p&gt;

&lt;p&gt;他にも、興味が湧いたり必要があって何かを調べ出したりすると元の作業がわからなくなります。&lt;br /&gt;
絶対に、です。&lt;/p&gt;

&lt;p&gt;そこで何年も試行錯誤しまくって今のタスク管理方法に落ち着きました。&lt;/p&gt;

&lt;p&gt;バレットジャーナルというタスク管理術があります。&lt;br /&gt;
箇条書きだけでタスク管理しましょうという方法で、基本的には今日やることを(デイリーログに)書き出して終わらなかったら明日に移しましょう。遠い未来や決まった予定なら専用のリスト(フューチャーログ)に移動しましょう、という方法です。&lt;/p&gt;

&lt;p&gt;バレットジャーナルは最近知ったので使ったことはないのですが、シンプルでとても良いと思います。&lt;/p&gt;

&lt;p&gt;別のタスク管理術にGTD(Getting Things Done)があります。&lt;br /&gt;
簡単に言うと、洗いざらい頭の中を(INBOXに)吐き出して順番に処理しましょういう手法です。&lt;br /&gt;
最初に頭の中身を全部INBOXに書き出して、それを見ながらすぐにやるか、すぐやらなければ適切なリスト(NextAction, プロジェクト, いつかやるなど)に移します。&lt;br /&gt;
その後、NextActionを見ながら先頭からタスクを実行していきます。&lt;/p&gt;

&lt;p&gt;GTDについては僕は何度も挑戦していますが、リストの振り分けが無意識にやるには複雑すぎるし、レビューの時間も取れずにしばらくすると破綻してしまいます。&lt;br /&gt;
ただ、INBOXに頭の中身を洗いざらい吐き出す、というのは気持ちが良くてよかったです。&lt;/p&gt;

&lt;p&gt;さらにフランクリン・プランナーという手帳があります。&lt;br /&gt;
お金を払って「七つの習慣」を学んだりするらしいですが、僕はそこには興味ないのでただの手帳として使っていました。&lt;br /&gt;
この手帳を使っていたのは、今では全然珍しくないけれど当時としては画期的だった「1日1ページ」だったからです。&lt;br /&gt;
そこに今日やることを書いて、タスクをこなしながら作業メモを取ります。&lt;br /&gt;
この手帳が僕のタスク管理方法の原点です。&lt;/p&gt;

&lt;p&gt;これで割り込み作業に俄然強くなりました。&lt;/p&gt;

&lt;p&gt;どのタスク管理術も、やること全体はどこかに保存しておきます。&lt;br /&gt;
全体としてはタスクが多い状態でも一カ所(バレットジャーナルならデイリーログ、GTDならNextAction、フランクリン・プランナーなら今日のページ)を見れば次にやることがすぐにわかる、というのが魅力です。&lt;br /&gt;
大量のタスクを見ながら優先度を決めていく、なんて僕にはできません。&lt;br /&gt;
それに加えて、今やってるタスクには印を付けるので、割り込みがあってもすぐに元の作業に戻ることができます。&lt;/p&gt;

&lt;p&gt;さて、本題です。&lt;/p&gt;

&lt;p&gt;僕のタスク管理方法はこれらを組み合わせたもののようになっています。実際はバレットジャーナルは使ったことありませんので試行錯誤の結果なのですが。&lt;br /&gt;
重要なのは「気軽であること」「タスク全体を忘れないこと」「今やっていること、次にやることが明確であること」です。&lt;/p&gt;

&lt;p&gt;順番に説明します&lt;/p&gt;

&lt;p&gt;まずはタスクが生まれたら入れる場所(GTDのINBOX)を作ります。&lt;br /&gt;
僕は気軽に追加できる点を重視してPCかスマホからGoogle Keepに突っ込んでいます。&lt;br /&gt;
読まなければならない記事だけはPocketで管理しています。&lt;br /&gt;
「ポケット１つ原則」に従えば統一した方がいいのだと思いますが、2つでもさして問題ありません。&lt;/p&gt;

&lt;p&gt;INBOXはデジタルでもアナログでも良いですが「簡単」である必要があります。&lt;br /&gt;
タスクを追加するのに書き込む場所を探したり入力が面倒だったりすると、一日何度も何十回も繰り返す作業だけに思いのほか苦痛です。&lt;br /&gt;
それでは長続きしません。&lt;/p&gt;

&lt;p&gt;次に全てのタスクを入れる場所(マスタータスクリスト)を作ります。&lt;br /&gt;
僕はつい最近までToodledoを使っていましたが、階層化や移動が容易なのでDynalistに移行してみたところです。&lt;br /&gt;
全てのタスクを入れるので僕の場合は1000件を超えています。&lt;/p&gt;

&lt;p&gt;基本的に見やすく整理できればツールは何でも良いです。&lt;br /&gt;
ただし、これも分類やタグ付けにこだわってしまうと面倒で長続きしません。
適度に分類しましょう。&lt;br /&gt;
ライフハック系の記事を読むと、この「分類」にこだわっているのをよく見ますが、タスク管理にとって分類は本質的なものではありません。&lt;br /&gt;
適当に作って使いやすいように修正していけば良いです。&lt;/p&gt;

&lt;p&gt;最後に今日やることを書き出す場所(TODAY)を作ります。&lt;br /&gt;
今まではWorkFlowyに日付ごとの項目を用意していたのですが、来年からはほぼ日手帳にする予定です。&lt;/p&gt;

&lt;p&gt;まず、昨日のやることから今日に持ち越すものを転記します。&lt;br /&gt;
今日もできそうもなかったらマスタータスクリストに戻します。&lt;br /&gt;
そしてINBOXとマスタータスクリストから今日やらなければならないタスク、できそうなタスクをTODAYに転記します。&lt;br /&gt;
あとはTODAYを見ながら作業を進めればいいだけです。&lt;br /&gt;
割り込みが発生した場合は、TODAYかINBOXに追加します。&lt;/p&gt;

&lt;p&gt;これもツールはアナログでもデジタルでも良く、「今日」が簡単に判別できれば良いです。&lt;/p&gt;

&lt;p&gt;そして「レビュー」。&lt;br /&gt;
どんなタスク管理をしようとも必要な作業です。
さらに一番面倒で挫折しやすいところです。&lt;br /&gt;
昔は「レビュー」という単語が抽象的過ぎて何をやっていいのかよくわからなかったのですが、やらなくて良くなったタスクを捨てたり、タスクの分類が合っているか確認したり、タスクが大きすぎるなら細分化したりします。&lt;/p&gt;

&lt;p&gt;この時点で全てのタスクに目を通すことになるのですが、この行為自体が一番重要だと思っています。&lt;/p&gt;

&lt;p&gt;デジタルで転記する必要がないからとこの手順を省くと「死にタスク」だらけになって破綻します。&lt;br /&gt;
記憶に引っ掛かるように全て眺めることが重要で、ついでにタスクを整理するくらいの気持ちです。&lt;/p&gt;

&lt;p&gt;レビューは永遠に行う必要があるのですが、必ずしも定期的にやらなくてもいいかなと思います。&lt;br /&gt;
よく言われるのは「毎朝」「毎夜」「毎週月曜日」とかですね。&lt;br /&gt;
タスクの入れ替わりが激しい人なら短いスパンで、そうでなければ暇なときでいいと思います。&lt;br /&gt;
僕はもちろん「暇なとき」です。&lt;/p&gt;

&lt;p&gt;蛇足ですが、ツールを移行することで完全なレビューができます。&lt;br /&gt;
ツールの種類やアナログかデジタルかなどは、使いやすさや向き不向きがあるもののどれを選んでも問題ありません。&lt;br /&gt;
ツールからツールにタスクを転記することで結果的に全てのタスクを眺めることになります。&lt;/p&gt;

&lt;p&gt;以上が僕のタスク管理方法です。&lt;br /&gt;
ずぼらな人でもできる気がしてきましたね。&lt;br /&gt;
(本当か？)&lt;/p&gt;

&lt;p&gt;まだまだチケット管理などのWeb上のサービスやローカルのファイルとの連携など、どうすればいいのか試行錯誤している部分はあるものの概ねうまく回っています。&lt;br /&gt;
長期的な目標とかも組み込んでみたいんですけどね。&lt;br /&gt;
一番難しいのはこだわらないこと！！&lt;/p&gt;

&lt;p&gt;そう言えば、借金玉という人の「発達障害の僕が「食える人」に変わった すごい仕事術」という本が参考になりそうなので今度読んでみようと思っているところです。&lt;/p&gt;

&lt;p&gt;※ 一応僕もITエンジニアなので今度は技術的な記事も書きたいですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>文章を書くということ</title>
      <link>http://marony.github.io/post/post_20181226212544/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20181226212544/</guid>
      <description>

&lt;h2 id=&#34;文章を書くということ&#34;&gt;文章を書くということ&lt;/h2&gt;

&lt;p&gt;僕は文章が苦手です。&lt;/p&gt;

&lt;p&gt;小学校の夏休みの読書感想文は本の前書きや後書きを丸写しでしたし、
作文の宿題は原稿用紙を埋めるだけが目的だったので、
次の行の始めで文が終わるように句読点を駆使したりもしました。&lt;/p&gt;

&lt;p&gt;でも仕事の文書、設計書や議事録なんかはなんとなく書けています。&lt;br /&gt;
なぜなら、文書の目的や読む人がはっきりと決まっていて、さらに読む人の知識レベルや関心も一定だからです。&lt;/p&gt;

&lt;p&gt;でも今も文章が書けなくて困っています。&lt;br /&gt;
文章を書くことに関する本をいくつか読んでみましたが、「書きたいことを探すには？」とか、「語尾を統一しましょう」とか、「起承転結をしっかり」のようなテクニックが書いてある本がほとんどでした。&lt;br /&gt;
それは僕が欲しかった情報ではありません。&lt;/p&gt;

&lt;p&gt;僕は書きたいことを無理にひねくり出すような仕事ではありませんし、うまい文章を書きたいわけでもありません。そもそも、そのレベルまで達していません。&lt;br /&gt;
それでもやっぱり文章が書けなくて困っています。文章をどう書いて良いかがわからない。&lt;/p&gt;

&lt;p&gt;わけがわからないのでそれを自分の中で掘り下げてみました。&lt;br /&gt;
結局のところ、「文章を書くために継続的に情報を集め記録し整理しそこから文章を書き始めて完成まで持っていく方法」がわからないんだと思います。&lt;/p&gt;

&lt;p&gt;そんな中、「アウトライナー実践入門」という本を読みました。&lt;br /&gt;
これはアウトアインプロセッサ(主にWorkFlowly)をどう使うかという本です。&lt;br /&gt;
この本では、文章を書く時にアウトアインをどう動かして文章に仕立て上げていくか、ということが書いてあり、
文章を書いている他人の思考が垣間見られてとても参考になりました。&lt;/p&gt;

&lt;p&gt;そう言えば「発想法」という本があります。&lt;br /&gt;
だいぶ昔に読んだので記憶が曖昧なところがありますが、
この本は「KJ法」という思考手段について解説しています。&lt;br /&gt;
それ自体も役に立ったような気がしますが、何よりも著者が文化人類学の研究をどのように行っているのかが間接的にわかり勉強になった記憶があります。&lt;/p&gt;

&lt;p&gt;人が文章を書くまでのプロセスをパクろう！！&lt;br /&gt;
これです。作家が本を書くまでの作業や思考の過程が見たいです。&lt;/p&gt;

&lt;p&gt;世の中には絵でも文章でも音楽でもプログラムでも作品としての結果は溢れているのですが、その作成の過程という情報は驚くほどに少ないです。
絶対に参考になると思うのでGitHubのようなものができて欲しいなと思っています。ただ、GitHubはソフトウェア開発の中のソースコードしか残っていないので、アイデアだったり設計途中の思考だったりも履歴付きで見られるものがいいです。&lt;/p&gt;

&lt;p&gt;こんなモヤっとした考えを、この前本屋に行った時に思い出したので妻に聞いてみました。
妻は昔文章を書く仕事をしていました。&lt;/p&gt;

&lt;p&gt;僕「「発想法」という本の中で研究者の作業が垣間見れて参考になったんだけど、いま文章を書けるようになりたいと思っていてそれの作家版はないかな？」&lt;br /&gt;
妻「柳田国男が「取材」について書いていた気がする」&lt;/p&gt;

&lt;p&gt;ここで目鱗です。&lt;br /&gt;
ああ、そうか、「取材」というのか。作家が文章を書くまでの間の材料集めや加工を。&lt;/p&gt;

&lt;p&gt;これは大きな収穫でした。
今は「文章」ではなく「取材」についての情報を集めています。&lt;br /&gt;
確かに僕が求めているのは「取材」の方法やプロセスっぽいです。&lt;br /&gt;
こんな本があるよ、とか教えてもらえたらとても喜びます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>手帳を買いました</title>
      <link>http://marony.github.io/post/post_20181226091550/</link>
      <pubDate>Wed, 26 Dec 2018 09:15:50 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20181226091550/</guid>
      <description>

&lt;h2 id=&#34;手帳を買いました&#34;&gt;手帳を買いました&lt;/h2&gt;

&lt;p&gt;この度、ITエンジニアとしてはどうかと思うものの、時代遅れな手帳を買いました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://marony.github.io/images/post/P_20181225_143419.jpg&#34; alt=&#34;手帳&#34; /&gt;&lt;/p&gt;

&lt;p&gt;昔は手帳を使っていたのですが最近は情報管理(予定とタスク)はデジタルメインでした。&lt;/p&gt;

&lt;p&gt;大昔は手帳とデジタル(Googleカレンダーとhowm)を併用していましたが、Googleカレンダーとhowmに移行してから面倒で手帳は使わなくなりました。&lt;br /&gt;
その後、howmはまとまったタスク(プロジェクト)を扱うのに不便でWorkFlowyに移行しました。WorkFlowyは使いやすくツリー状にタスクを管理できるのでプロジェクト単位でのタスクでも管理しやすく、ここ数ヶ月あまり不便なく利用しています。&lt;/p&gt;

&lt;p&gt;また、仕事では複数プロジェクトに関わることが多く、突発の仕事が降ってくることも多いので、机の上にはいつもA4の紙を広げています。&lt;/p&gt;

&lt;p&gt;マスタータスクリストはWorkFlowyで管理しますが、今日や今週やることをA4の紙に書き出し、今現在取り掛かっているタスクがわかるように印をつけ、割り込みに対応したあとにすぐに戻ることができるようにしています。次の日に「昨日何をやってたっけ？」を思い出すのも一瞬です。&lt;/p&gt;

&lt;p&gt;僕は記憶力が皆無ですぐに興味が他に移ってしまうので、その前にやっていたことをすぐに思い出せるというのは生産性に大きな影響を与えます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://marony.github.io/images/post/P_20181225_144413.jpg&#34; alt=&#34;A4紙&#34; /&gt;&lt;/p&gt;

&lt;p&gt;紙には適当に書きなぐり、図や矢印を引きまくり、いつでもくしゃくしゃにして捨てられるという大きなメリットがあります。今でも設計を考える時に書きなぐるのは、ExcelでもVISIOでもdraw.ioでもFreeMindでもなく紙です。&lt;/p&gt;

&lt;p&gt;GoogleカレンダーとWorkFlowyを予定とタスクの正本として扱い、A4紙を現在やっていることのバッファと書きなぐり用に利用しているわけです。&lt;/p&gt;

&lt;p&gt;で、今回手帳を買ったわけですが、デコったり過度に装飾したり、インスタ映えしたり、キレイに書いたり、夢を叶えてくれたり、そんなものは僕には不要です。毎日の雑事さえこなせればいいのです。&lt;/p&gt;

&lt;p&gt;選んだものはフランクリン・プランナーのように1日1ページがいいかなと思い、ほぼ日手帳のカズンです。&lt;br /&gt;
ネットや雑誌にはキレイに着飾ったほぼ日手帳が広がっていますが、僕はあくまでもA4紙の代わりに利用するつもりです。&lt;/p&gt;

&lt;p&gt;予定やタスク全般に言えますが、デジタル管理だと転記しないからか見た目がそっけないからか、レビューを疎かにしてしまい、レビューしても記憶に残らず、確かに記録はされているけれどすっかり忘れているという状態になります。&lt;/p&gt;

&lt;p&gt;そこで手帳の月間カレンダーや今日のページに記憶に残したいものだけを書き出し、僕の脳みそのリマインダにしようという意図があります。&lt;br /&gt;
毎日同じ場所に同じことが書いてあると脳みそはなぜか覚えてるのです。&lt;br /&gt;
家庭の大事な用事や長期間の計画などはデジタル管理ではたびたび抜けてしまう部分でした。&lt;/p&gt;

&lt;p&gt;上記が大まかな指針ですが、具体的に何をどこにどのように書くかは来年使いながら適当に決めていきます。&lt;br /&gt;
僕の悪い癖で、最初に物事を完璧に決めようとして手を広げすぎて頭が混乱し面倒になって失敗する、というものがあります。&lt;br /&gt;
なるべくシンプルに使いながら決めていきます。&lt;br /&gt;
いくら優れていても努力や忍耐が必要なシステムは長続きしません。&lt;/p&gt;

&lt;p&gt;怠惰や欲望に従って動くとなぜかうまく回るというのが良いシステムです。資本主義のように。&lt;/p&gt;

&lt;p&gt;補足として、紙だとパソコンのように後ろから誰かに見られないという安心感と、たびたび情報管理を移行することで、結果的にそれがレビューになる、という理由もあったりします。&lt;/p&gt;

&lt;p&gt;一生のうちに、ビシっと自分向け情報管理システムを構築したいものです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>書く習慣をつけたい</title>
      <link>http://marony.github.io/post/post_20181222153450/</link>
      <pubDate>Sat, 22 Dec 2018 15:34:50 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20181222153450/</guid>
      <description>

&lt;h2 id=&#34;書く習慣をつけたい&#34;&gt;書く習慣をつけたい&lt;/h2&gt;

&lt;p&gt;僕はTwitterジャンキーですが、文章を書くことができません。&lt;br /&gt;
まず書く内容が決まらないとかいう以前の問題で、書く方法がわかりません。&lt;/p&gt;

&lt;p&gt;文章を書くには何をするのか？&lt;br /&gt;
頭の中で何を考え何をどうすると文章になるのか？&lt;/p&gt;

&lt;p&gt;この程度の短文ならばもちろん今現在書いているので書けるのだけれど…&lt;/p&gt;

&lt;p&gt;ひとまずこのままではマズいと思うのでなんでもいいから文章を書いていく。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HugoでMermaid.jsを使えるようにした</title>
      <link>http://marony.github.io/post/post_20181221132734/</link>
      <pubDate>Fri, 21 Dec 2018 13:27:34 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20181221132734/</guid>
      <description>

&lt;h2 id=&#34;hugoでmermaid-jsを使えるようにした&#34;&gt;HugoでMermaid.jsを使えるようにした&lt;/h2&gt;

&lt;p&gt;こう書けば、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;｛｛&amp;lt; mermaid align=&amp;quot;left&amp;quot; &amp;gt;｝｝
  graph LR;
  A[Hard edge] --&amp;gt;|Link text| B(Round edge)
  B --&amp;gt; C{Decision}
  C --&amp;gt;|One| D[Result one]
  C --&amp;gt;|Two| E[Result two]
｛｛&amp;lt; /mermaid &amp;gt;｝｝
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうなる。&lt;/p&gt;

&lt;div class=&#34;mermaid&#34; align=&#34;left&#34;&gt;
  graph LR;
  A[Hard edge] --&gt;|Link text| B(Round edge)
  B --&gt; C{Decision}
  C --&gt;|One| D[Result one]
  C --&gt;|Two| E[Result two]
&lt;/div&gt;


&lt;p&gt;※ コードブロックでエラーが出るので安直に半角の&amp;rsquo;{&amp;lsquo;, &amp;lsquo;}&amp;lsquo;を全角の&amp;rsquo;｛&amp;rsquo;, &amp;lsquo;｝&amp;rsquo;に置換して回避してます…&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>プロフィールページを更新</title>
      <link>http://marony.github.io/post/post_20181221122922/</link>
      <pubDate>Thu, 20 Dec 2018 10:36:22 JST</pubDate>
      
      <guid>http://marony.github.io/post/post_20181221122922/</guid>
      <description>

&lt;h2 id=&#34;プロフィールページを更新&#34;&gt;プロフィールページを更新&lt;/h2&gt;

&lt;p&gt;単なるイメージチェンジです。
心機一転。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
